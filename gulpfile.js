'use strict';

const less        = require('gulp-less');
const sass        = require('gulp-sass');
const gulp        = require('gulp');
const uglify      = require('gulp-uglify');
const concat      = require('gulp-concat');
const sourcemaps  = require('gulp-sourcemaps');
const materialize = require.resolve('materialize-css');
const cleanCSS    = require('gulp-clean-css');
const pkg         = require('./package.json');
const iopackage   = require('./io-package.json');
const babel       = require('gulp-babel');

function lang2data(lang) {
    var str = '{\n';
    var count = 0;
    for (var w in lang) {
        if (lang.hasOwnProperty(w)) {
            count++;
            var key = '  "' + w.replace(/"/g, '\\"') + '": ';
            str += padRight(key, 42) +  '"' + lang[w].replace(/"/g, '\\"') + '",\n';
        }
    }
    if (!count) return '{\n}';
    return str.substring(0, str.length - 2) + '\n}';
}

function readWordJs() {
    var fs = require('fs');
    try {
        var words = fs.readFileSync('./src/js/words.js').toString();
        var lines = words.split(/\r\n|\r|\n/g);
        var i = 0;
        while (!lines[i].match(/^systemDictionary = {/)) {
            i++;
        }
        lines.splice(0, i);

        // remove last empty lines
        i = lines.length - 1;
        while (!lines[i]) {
            i--;
        }
        if (i < lines.length - 1) {
            lines.splice(i + 1);
        }

        lines[0] = lines[0].replace('systemDictionary = ', '');
        lines[lines.length - 1] = lines[lines.length - 1].trim().replace(/};$/, '}');
        words = lines.join('\n');
        var resultFunc = new Function('return ' + words + ';');

        return resultFunc();
    } catch (e) {
        return null;
    }
}
function padRight(text, totalLength) {
    return text + (text.length < totalLength ? new Array(totalLength - text.length).join(' ') : '');
}
function writeWordJs(data) {
    var fs = require('fs');
    var text = '// DO NOT EDIT THIS FILE!!! IT WILL BE AUTOMATICALLY GENERATED FROM src/i18n\n';
    text += '/*global systemDictionary:true */\n';
    text += '\'use strict\';\n\n';
    text += 'systemDictionary = {\n';
    for (var word in data) {
        if (data.hasOwnProperty(word)) {
            text += '    ' + padRight('"' + word.replace(/"/g, '\\"') + '": {', 50);
            var line = '';
            for (var lang in data[word]) {
                if (data[word].hasOwnProperty(lang)) {
                    line += '"' + lang + '": "' + padRight(data[word][lang].replace(/"/g, '\\"') + '",', 50) + ' ';
                }
            }
            if (line) {
                line = line.trim();
                line = line.substring(0, line.length - 1);
            }
            text += line + '},\n';
        }
    }
    text += '};';
    fs.writeFileSync('./src/js/words.js', text);
}

const EMPTY = '------XXXXXXXXX------';

gulp.task('words2languages', function (done) {
    var fs = require('fs');

    var langs =  {
        'en': {},
        'de': {},
        'ru': {},
        'pt': {},
        'nl': {},
        'fr': {}
    };
    var data = readWordJs();
    if (data) {
        for (var word in data) {
            if (data.hasOwnProperty(word)) {
                for (var lang in data[word]) {
                    if (data[word].hasOwnProperty(lang)) {
                        langs[lang][word] = data[word][lang];
                        //  pre-fill all other languages
                        for (var j in langs) {
                            if (langs.hasOwnProperty(j)) {
                                langs[j][word] = langs[j][word] || EMPTY;
                            }
                        }
                    }
                }
            }
        }

        for (var l in langs) {
            var keys = Object.keys(langs[l]);
            keys.sort();
            var obj = {};
            for (var k = 0; k < keys.length; k++) {
                obj[keys[k]] = langs[l][keys[k]];
            }
            if (!fs.existsSync('./src/i18n/' + l)) {
                fs.mkdirSync('./src/i18n/' + l);
            }

            fs.writeFileSync('./src/i18n/' + l + '/translations.json', lang2data(obj));
        }
    } else {
        console.error('Cannot read or parse words.js');
    }
    done();
});

gulp.task('languages2words', function (done) {
    var fs = require('fs');
    var dirs = fs.readdirSync('./src/i18n/');
    var langs = {};
    var bigOne = {};
    var order = ['en', 'de', 'ru', 'pt', 'nl', 'fr'];
    dirs.sort(function (a, b) {
        var posA = order.indexOf(a);
        var posB = order.indexOf(b);
        if (posA === -1 && posB === -1) {
            if (a > b) return 1;
            if (a < b) return -1;
            return 0;
        } else if (posA === -1) {
            return -1;
        } else if (posB === -1) {
            return 1;
        } else {
            if (posA > posB) return 1;
            if (posA < posB) return -1;
            return 0;
        }
    });
    for (var l = 0; l < dirs.length; l++) {
        var lang = dirs[l];
        langs[lang] = fs.readFileSync('./src/i18n/' + lang + '/translations.json').toString();
        langs[lang] = JSON.parse(langs[lang]);
        var words = langs[lang];
        for (var word in words) {
            if (words.hasOwnProperty(word)) {
                bigOne[word] = bigOne[word] || {};
                if (words[word] !== EMPTY) {
                    bigOne[word][lang] = words[word];
                }
            }
        }
    }
    // read actual words.js
    var aWords = readWordJs();

    var temporaryIgnore = ['pt', 'fr', 'nl'];
    if (aWords) {
        // Merge words together
        for (var w in aWords) {
            if (aWords.hasOwnProperty(w)) {
                if (!bigOne[w]) {
                    console.warn('Take from actual words.js: ' + w);
                    bigOne[w] = aWords[w]
                }
                dirs.forEach(function (lang) {
                    if (temporaryIgnore.indexOf(lang) !== -1) return;
                    if (!bigOne[w][lang]) {
                        console.warn('Missing "' + lang + '": ' + w);
                    }
                });
            }
        }

    }

    writeWordJs(bigOne);
    done();
});

gulp.task('updatePackages', function (done) {
    iopackage.common.version = pkg.version;
    iopackage.common.news = iopackage.common.news || {};
    if (!iopackage.common.news[pkg.version]) {
        var news = iopackage.common.news;
        var newNews = {};

        newNews[pkg.version] = {
            en: 'news',
            de: 'neues',
            ru: 'новое'
        };
        iopackage.common.news = Object.assign(newNews, news);
    }
    fs.writeFileSync('io-package.json', JSON.stringify(iopackage, null, 4));
    done();
});

gulp.task('updateReadme', function (done) {
    var readme = fs.readFileSync('README.md').toString();
    var pos = readme.indexOf('## Changelog\n');
    if (pos !== -1) {
        var readmeStart = readme.substring(0, pos + '## Changelog\n'.length);
        var readmeEnd   = readme.substring(pos + '## Changelog\n'.length);

        if (readme.indexOf(version) === -1) {
            var timestamp = new Date();
            var date = timestamp.getFullYear() + '-' +
                ('0' + (timestamp.getMonth() + 1).toString(10)).slice(-2) + '-' +
                ('0' + (timestamp.getDate()).toString(10)).slice(-2);

            var news = '';
            if (iopackage.common.news && iopackage.common.news[pkg.version]) {
                news += '* ' + iopackage.common.news[pkg.version].en;
            }

            fs.writeFileSync('README.md', readmeStart + '### ' + version + ' (' + date + ')\n' + (news ? news + '\n\n' : '\n') + readmeEnd);
        }
    }
    done();
});

gulp.task('sassMaterialize', function () {
    gulp.src(['./src/materialize-css/sass/**/*.scss'])
        .pipe(sass({
            paths: [ ]
        }))
        .pipe(concat('materialize.css'))
//        .pipe(cleanCSS({compatibility: 'ie8'}))
        .pipe(gulp.dest('./www/lib/css'));

});
gulp.task('compressMaterialize', function () {
    return gulp.src([
        './src/materialize-css/js/anime.min.js',
        './src/materialize-css/js/cash.js',
        './src/materialize-css/js/global.js',
        './src/materialize-css/js/tabs.js',
        './src/materialize-css/js/dropdown.js',
        './src/materialize-css/js/toasts.js',
        './src/materialize-css/js/modal.js',
        './src/materialize-css/js/select.js',
        './src/materialize-css/js/forms.js',
        './src/materialize-css/js/forms.js',
        './src/colorpicker/js/materialize-colorpicker.js'
    ])
    .pipe(sourcemaps.init())
    .pipe(concat('materialize.js'))
    .pipe(babel({
        plugins: [
            'transform-es2015-arrow-functions',
            'transform-es2015-block-scoping',
            'transform-es2015-classes',
            'transform-es2015-template-literals'
        ]
    }))
    //.pipe(uglify())
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest('./www/lib/js'));
});

gulp.task('lessApp', function () {
    gulp.src(['./src/css/*.less', './src/colorpicker/less/*.less'])
        .pipe(sourcemaps.init())
        .pipe(less({
            paths: [ ]
        }))
        .pipe(concat('app.css'))
        .pipe(cleanCSS({compatibility: 'ie8'}))
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./www/css'));
});

gulp.task('lessIob', function () {
    return gulp.src(['./src/lib/css/iob/*.less'])
        .pipe(sourcemaps.init())
        .pipe(less({
            paths: [ ]
        }))
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./www/lib/css/iob'));
});
gulp.task('lessTreeTable', function () {
    return gulp.src(['./src/lib/css/jquery.treetable.theme.less'])
        .pipe(sourcemaps.init())
        .pipe(less({
            paths: [ ]
        }))
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./www/lib/css'));
});
gulp.task('compressApp', function () {
    return gulp.src([
        './src/js/*.js',
        '!./src/js/adapter-settings.js',
        '!./src/js/adminStates.js',
        '!./src/js/adminGroups.js'
    ])
        .pipe(sourcemaps.init())
        .pipe(concat('app.js'))
        .pipe(uglify())
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./www/js'));
});

gulp.task('compressVendor', function () {
    return gulp.src([
        './src/lib/js/jquery-1.11.2.min.js',
        './src/lib/js/jquery-ui.min.js',
//        './src/lib/js/jqGrid/jquery.jqGrid-4.5.4.min.js',
//        './src/lib/js/jqGrid/grid.locale-all.js',
        './src/lib/js/colResizable-1.6.min.js',
        './src/lib/js/jquery.multiselect-1.13.min.js',
        './src/lib/js/semver.min.js',
        './src/lib/js/ace-1.2.0/ace.js',
        './src/lib/js/loStorage.js',
        './src/lib/js/translate.js',
        './src/lib/js/jquery.fancytree-all.min.js',
//        './src/lib/js/jquery.treetable.js',
//        './src/lib/js/selectID.js',
        './src/lib/js/cron/jquery.cron.js',
        './src/lib/js/cron/cron2text.js'
    ])
        .pipe(sourcemaps.init())
        .pipe(concat('vendor.js'))
        .pipe(uglify())
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./www/lib/js'));
});

gulp.task('copySrc', function () {
    return gulp.src([
        './src/**/*.*',
        '!./src/**/*.less',
        '!./src/js/**/admin*.js',
        '!./src/materialize-css/**/*',
        '!./src/colorpicker/**/*'
    ])
    .pipe(gulp.dest('./www'));
});
gulp.task('copyColorpicker', function () {
    return gulp.src([
        './src/colorpicker/**/*.png'
    ])
        .pipe(gulp.dest('./www'));
});
gulp.task('copyAce', function () {
    return gulp.src([
        './src/lib/js/ace-1.2.0/mode-json.js',
        './src/lib/js/ace-1.2.0/worker-json.js'
    ],  {base: './src/lib/js/ace-1.2.0/'})
        .pipe(gulp.dest('./www'));
});
gulp.task('copy', ['copySrc', 'copyAce', 'copyColorpicker']);

gulp.task('watch', function () {
    gulp.watch('./src/css/*.less', ['lessApp']);
    gulp.watch('./src/lib/css/iob/*.less', ['lessApp']);
    gulp.watch(['./src/materialize-css/sass/**/*.scss'], ['sassMaterialize']);
    gulp.watch(['./src/js/*.js'], ['compressApp']);
});

gulp.task('default', ['lessIob', 'lessApp', 'lessTreeTable', 'sassMaterialize', 'compressApp', 'compressVendor', 'compressMaterialize', 'copy']);

